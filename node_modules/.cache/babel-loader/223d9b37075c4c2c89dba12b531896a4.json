{"ast":null,"code":"import { data_prob } from './data.js';\n\nfunction probRangeFinder() {\n  let _range_primary = [];\n  let _range_secondary = [];\n\n  let _cat;\n\n  let _prob_accum_primary = 0;\n  let _prob_accum_secondary = 0;\n  let _data_primary = data_prob.primary;\n  let _data_secondary = data_prob.secondary;\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n\n    if (index > 0) {\n      _prob_accum_primary += _data_primary[index - 1].prob;\n      _prob_accum_secondary += _data_secondary[index - 1].prob;\n    }\n\n    item.motions.forEach((item_each, index_each) => {});\n  });\n}","map":{"version":3,"sources":["/Users/zomme/Github/labs-hri-prototypes/ambidex-idle-sequencer/src/probRangeFinder.js"],"names":["data_prob","probRangeFinder","_range_primary","_range_secondary","_cat","_prob_accum_primary","_prob_accum_secondary","_data_primary","primary","_data_secondary","secondary","motionGroup","forEach","item","index","cat","prob","motions","item_each","index_each"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AACA,MAAIC,IAAJ;;AACA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AACA,MAAIC,aAAa,GAAGP,SAAS,CAACQ,OAA9B;AACA,MAAIC,eAAe,GAAGT,SAAS,CAACU,SAAhC;AAEAV,EAAAA,SAAS,CAACW,WAAV,CAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7CV,IAAAA,IAAI,GAAGS,IAAI,CAACE,GAAZ;;AACA,QAAGD,KAAK,GAAG,CAAX,EAAc;AACZT,MAAAA,mBAAmB,IAAIE,aAAa,CAACO,KAAK,GAAC,CAAP,CAAb,CAAuBE,IAA9C;AACAV,MAAAA,qBAAqB,IAAIG,eAAe,CAACK,KAAK,GAAC,CAAP,CAAf,CAAyBE,IAAlD;AACD;;AACDH,IAAAA,IAAI,CAACI,OAAL,CAAaL,OAAb,CAAqB,CAACM,SAAD,EAAYC,UAAZ,KAA2B,CAE/C,CAFD;AAGD,GATD;AAUD","sourcesContent":["import {data_prob} from './data.js';\n\nfunction probRangeFinder() {\n  let _range_primary = [];\n  let _range_secondary = [];\n  let _cat;\n  let _prob_accum_primary = 0;\n  let _prob_accum_secondary = 0;\n  let _data_primary = data_prob.primary;\n  let _data_secondary = data_prob.secondary;\n\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n    if(index > 0) {\n      _prob_accum_primary += _data_primary[index-1].prob;\n      _prob_accum_secondary += _data_secondary[index-1].prob;\n    }\n    item.motions.forEach((item_each, index_each) => {\n\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
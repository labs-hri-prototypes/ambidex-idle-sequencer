{"ast":null,"code":"import { data_prob } from './data.js';\n\nfunction probRangeFinder() {\n  let _range_primary = [];\n  let _range_secondary = [];\n\n  let _cat;\n\n  let _prob_accum_primary = 0;\n  let _prob_accum_secondary = 0;\n  let _data_primary = data_prob.primary;\n  let _data_secondary = data_prob.secondary;\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n\n    let prob_cat_primary = _data_primary.find(o => o.cat === _cat).prob;\n\n    let prob_cat_secondary = _data_secondary.find(o => o.cat === _cat).prob;\n\n    let prob_accum_inCat_primary = 0;\n    let prob_accum_inCat_secondary = 0;\n\n    if (index > 0) {\n      _prob_accum_primary += prob_cat_primary;\n      _prob_accum_secondary += prob_cat_secondary;\n    }\n\n    item.motions.forEach((item_each, index_each) => {//prob_accum_inCat =\n\n      /*\n      let output = {\n        code: item_each.code,\n        prob: prob_accum_inCat\n      };\n      */\n    });\n  });\n}","map":{"version":3,"sources":["/Users/zomme/Github/labs-hri-prototypes/ambidex-idle-sequencer/src/probRangeFinder.js"],"names":["data_prob","probRangeFinder","_range_primary","_range_secondary","_cat","_prob_accum_primary","_prob_accum_secondary","_data_primary","primary","_data_secondary","secondary","motionGroup","forEach","item","index","cat","prob_cat_primary","find","o","prob","prob_cat_secondary","prob_accum_inCat_primary","prob_accum_inCat_secondary","motions","item_each","index_each"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AACA,MAAIC,IAAJ;;AACA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AACA,MAAIC,aAAa,GAAGP,SAAS,CAACQ,OAA9B;AACA,MAAIC,eAAe,GAAGT,SAAS,CAACU,SAAhC;AAEAV,EAAAA,SAAS,CAACW,WAAV,CAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7CV,IAAAA,IAAI,GAAGS,IAAI,CAACE,GAAZ;;AACA,QAAIC,gBAAgB,GAAGT,aAAa,CAACU,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUX,IAAlC,EAAwCe,IAA/D;;AACA,QAAIC,kBAAkB,GAAGX,eAAe,CAACQ,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUX,IAApC,EAA0Ce,IAAnE;;AACA,QAAIE,wBAAwB,GAAG,CAA/B;AACA,QAAIC,0BAA0B,GAAG,CAAjC;;AACA,QAAGR,KAAK,GAAG,CAAX,EAAc;AACZT,MAAAA,mBAAmB,IAAIW,gBAAvB;AACAV,MAAAA,qBAAqB,IAAIc,kBAAzB;AACD;;AACDP,IAAAA,IAAI,CAACU,OAAL,CAAaX,OAAb,CAAqB,CAACY,SAAD,EAAYC,UAAZ,KAA2B,CAC9C;;AACA;AACN;AACA;AACA;AACA;AACA;AACK,KARD;AASD,GAnBD;AAoBD","sourcesContent":["import {data_prob} from './data.js';\n\nfunction probRangeFinder() {\n  let _range_primary = [];\n  let _range_secondary = [];\n  let _cat;\n  let _prob_accum_primary = 0;\n  let _prob_accum_secondary = 0;\n  let _data_primary = data_prob.primary;\n  let _data_secondary = data_prob.secondary;\n\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n    let prob_cat_primary = _data_primary.find(o => o.cat === _cat).prob;\n    let prob_cat_secondary = _data_secondary.find(o => o.cat === _cat).prob;\n    let prob_accum_inCat_primary = 0;\n    let prob_accum_inCat_secondary = 0;\n    if(index > 0) {\n      _prob_accum_primary += prob_cat_primary;\n      _prob_accum_secondary += prob_cat_secondary;\n    }\n    item.motions.forEach((item_each, index_each) => {\n      //prob_accum_inCat =\n      /*\n      let output = {\n        code: item_each.code,\n        prob: prob_accum_inCat\n      };\n      */\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
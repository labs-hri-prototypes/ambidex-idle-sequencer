{"ast":null,"code":"import { data_prob } from './data.js';\n\nfunction probRangeFinder() {\n  let _range_1 = [];\n  let _range_2 = [];\n\n  let _cat;\n\n  let _prob_accum_1 = 0;\n  let _prob_accum_2 = 0;\n  let _data_1 = data_prob.primary;\n  let _data_2 = data_prob.secondary;\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n\n    let prob_cat_1 = _data_1.find(o => o.cat === _cat).prob;\n\n    let prob_cat_2 = _data_2.find(o => o.cat === _cat).prob;\n\n    let prob_accum_inCat_1 = 0;\n    let prob_accum_inCat_2 = 0;\n\n    if (index > 0) {\n      _prob_accum_1 += _data_1[index - 1].prob;\n      _prob_accum_2 += _data_2[index - 1].prob;\n    }\n\n    item.motions.forEach((item, index) => {\n      prob_accum_inCat_1 += prob_cat_1 * item.prob;\n      prob_accum_inCat_2 += prob_cat_2 * item.prob;\n      let prob1 = _prob_accum_1 + prob_accum_inCat_1;\n      let prob2 = _prob_accum_2 + prob_accum_inCat_2;\n      let output_1 = {\n        code: item.code,\n        prob: prob1\n      };\n      let output_2 = {\n        code: item.code,\n        prob: prob2\n      };\n\n      _range_1.push(output_1);\n\n      _range_2.push(output_2);\n    });\n  });\n  console.log(_range_1);\n  console.log(_range_2);\n}\n\nexport default probRangeFinder();","map":{"version":3,"sources":["/Users/zomme/Github/labs-hri-prototypes/ambidex-idle-sequencer/src/prRangeFinder.js"],"names":["data_prob","probRangeFinder","_range_1","_range_2","_cat","_prob_accum_1","_prob_accum_2","_data_1","primary","_data_2","secondary","motionGroup","forEach","item","index","cat","prob_cat_1","find","o","prob","prob_cat_2","prob_accum_inCat_1","prob_accum_inCat_2","motions","prob1","prob2","output_1","code","output_2","push","console","log"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,WAAxB;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIC,IAAJ;;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,OAAO,GAAGP,SAAS,CAACQ,OAAxB;AACA,MAAIC,OAAO,GAAGT,SAAS,CAACU,SAAxB;AAEAV,EAAAA,SAAS,CAACW,WAAV,CAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7CV,IAAAA,IAAI,GAAGS,IAAI,CAACE,GAAZ;;AACA,QAAIC,UAAU,GAAGT,OAAO,CAACU,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUX,IAA5B,EAAkCe,IAAnD;;AACA,QAAIC,UAAU,GAAGX,OAAO,CAACQ,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUX,IAA5B,EAAkCe,IAAnD;;AACA,QAAIE,kBAAkB,GAAG,CAAzB;AACA,QAAIC,kBAAkB,GAAG,CAAzB;;AACA,QAAGR,KAAK,GAAG,CAAX,EAAc;AACZT,MAAAA,aAAa,IAAIE,OAAO,CAACO,KAAK,GAAC,CAAP,CAAP,CAAiBK,IAAlC;AACAb,MAAAA,aAAa,IAAIG,OAAO,CAACK,KAAK,GAAC,CAAP,CAAP,CAAiBK,IAAlC;AACD;;AACDN,IAAAA,IAAI,CAACU,OAAL,CAAaX,OAAb,CAAqB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpCO,MAAAA,kBAAkB,IAAIL,UAAU,GAAGH,IAAI,CAACM,IAAxC;AACAG,MAAAA,kBAAkB,IAAIF,UAAU,GAAGP,IAAI,CAACM,IAAxC;AACA,UAAIK,KAAK,GAAGnB,aAAa,GAAGgB,kBAA5B;AACA,UAAII,KAAK,GAAGnB,aAAa,GAAGgB,kBAA5B;AACA,UAAII,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAEd,IAAI,CAACc,IADE;AAEbR,QAAAA,IAAI,EAAEK;AAFO,OAAf;AAIA,UAAII,QAAQ,GAAG;AACbD,QAAAA,IAAI,EAAEd,IAAI,CAACc,IADE;AAEbR,QAAAA,IAAI,EAAEM;AAFO,OAAf;;AAIAvB,MAAAA,QAAQ,CAAC2B,IAAT,CAAcH,QAAd;;AACAvB,MAAAA,QAAQ,CAAC0B,IAAT,CAAcD,QAAd;AACD,KAfD;AAgBD,GA1BD;AA2BAE,EAAAA,OAAO,CAACC,GAAR,CAAY7B,QAAZ;AACA4B,EAAAA,OAAO,CAACC,GAAR,CAAY5B,QAAZ;AACD;;AAED,eAAeF,eAAe,EAA9B","sourcesContent":["import {data_prob} from './data.js';\n\nfunction probRangeFinder() {\n  let _range_1 = [];\n  let _range_2 = [];\n  let _cat;\n  let _prob_accum_1 = 0;\n  let _prob_accum_2 = 0;\n  let _data_1 = data_prob.primary;\n  let _data_2 = data_prob.secondary;\n\n  data_prob.motionGroup.forEach((item, index) => {\n    _cat = item.cat;\n    let prob_cat_1 = _data_1.find(o => o.cat === _cat).prob;\n    let prob_cat_2 = _data_2.find(o => o.cat === _cat).prob;\n    let prob_accum_inCat_1 = 0;\n    let prob_accum_inCat_2 = 0;\n    if(index > 0) {\n      _prob_accum_1 += _data_1[index-1].prob;\n      _prob_accum_2 += _data_2[index-1].prob;\n    }\n    item.motions.forEach((item, index) => {\n      prob_accum_inCat_1 += prob_cat_1 * item.prob;\n      prob_accum_inCat_2 += prob_cat_2 * item.prob;\n      let prob1 = _prob_accum_1 + prob_accum_inCat_1;\n      let prob2 = _prob_accum_2 + prob_accum_inCat_2;\n      let output_1 = {\n        code: item.code,\n        prob: prob1\n      };\n      let output_2 = {\n        code: item.code,\n        prob: prob2\n      };\n      _range_1.push(output_1);\n      _range_2.push(output_2);\n    });\n  });\n  console.log(_range_1);\n  console.log(_range_2);\n}\n\nexport default probRangeFinder();\n"]},"metadata":{},"sourceType":"module"}